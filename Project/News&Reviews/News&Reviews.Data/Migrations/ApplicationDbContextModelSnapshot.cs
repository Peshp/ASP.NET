// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using News_Reviews.Data;

#nullable disable

namespace News_Reviews.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("News_Reviews.DataModels.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Points = 1,
                            QuestionId = 1,
                            Title = "More than a week"
                        },
                        new
                        {
                            Id = 2,
                            Points = 2,
                            QuestionId = 1,
                            Title = "Months and months"
                        },
                        new
                        {
                            Id = 3,
                            Points = 3,
                            QuestionId = 1,
                            Title = "Short campaign with an online multiplayer option to play for months"
                        },
                        new
                        {
                            Id = 4,
                            Points = 4,
                            QuestionId = 1,
                            Title = "Something short"
                        },
                        new
                        {
                            Id = 5,
                            Points = 5,
                            QuestionId = 1,
                            Title = "Not particularly bothered"
                        },
                        new
                        {
                            Id = 6,
                            Points = 6,
                            QuestionId = 1,
                            Title = "I want a game that takes up all my time but that I've finished within a few weeks."
                        },
                        new
                        {
                            Id = 7,
                            Points = 1,
                            QuestionId = 2,
                            Title = "Logic all the way. Games should be a strategic plan."
                        },
                        new
                        {
                            Id = 8,
                            Points = 2,
                            QuestionId = 2,
                            Title = "Mostly action, I guess."
                        },
                        new
                        {
                            Id = 9,
                            Points = 3,
                            QuestionId = 2,
                            Title = "I like logic, such as simple puzzles."
                        },
                        new
                        {
                            Id = 10,
                            Points = 4,
                            QuestionId = 2,
                            Title = "A good balance of both"
                        },
                        new
                        {
                            Id = 11,
                            Points = 1,
                            QuestionId = 3,
                            Title = "Strategy and logic"
                        },
                        new
                        {
                            Id = 12,
                            Points = 2,
                            QuestionId = 3,
                            Title = "Multiplayer options"
                        },
                        new
                        {
                            Id = 13,
                            Points = 3,
                            QuestionId = 3,
                            Title = "A vast array of guns and weapons "
                        },
                        new
                        {
                            Id = 14,
                            Points = 4,
                            QuestionId = 3,
                            Title = "Good puzzles and short, simple gameplay"
                        },
                        new
                        {
                            Id = 15,
                            Points = 5,
                            QuestionId = 3,
                            Title = "Lots of action, combat, and story"
                        },
                        new
                        {
                            Id = 16,
                            Points = 6,
                            QuestionId = 3,
                            Title = "Leveling up and ability to change features "
                        },
                        new
                        {
                            Id = 17,
                            Points = 1,
                            QuestionId = 4,
                            Title = "Nope! Not at all"
                        },
                        new
                        {
                            Id = 18,
                            Points = 2,
                            QuestionId = 4,
                            Title = "A little. It depends on my mood."
                        },
                        new
                        {
                            Id = 19,
                            Points = 3,
                            QuestionId = 4,
                            Title = "Sometimes"
                        },
                        new
                        {
                            Id = 20,
                            Points = 4,
                            QuestionId = 4,
                            Title = "Yes! Long and complicated games bore me. "
                        },
                        new
                        {
                            Id = 21,
                            Points = 5,
                            QuestionId = 4,
                            Title = "Yeah, a little. I need something to constantly require my attention."
                        },
                        new
                        {
                            Id = 22,
                            Points = 1,
                            QuestionId = 5,
                            Title = "I like a good choice of current songs playing in the background."
                        },
                        new
                        {
                            Id = 23,
                            Points = 2,
                            QuestionId = 5,
                            Title = "I don't really pay any attention to it. "
                        },
                        new
                        {
                            Id = 24,
                            Points = 3,
                            QuestionId = 5,
                            Title = "Nope, I usually play with the sound off."
                        },
                        new
                        {
                            Id = 25,
                            Points = 4,
                            QuestionId = 5,
                            Title = "To an extent, it's not a make-or-break deal for me, however."
                        },
                        new
                        {
                            Id = 26,
                            Points = 5,
                            QuestionId = 5,
                            Title = "Yes! A good soundtrack can be vital!"
                        },
                        new
                        {
                            Id = 27,
                            Points = 1,
                            QuestionId = 6,
                            Title = "Final Fantasy XV"
                        },
                        new
                        {
                            Id = 28,
                            Points = 2,
                            QuestionId = 6,
                            Title = "Rise of the Tomb Raider"
                        },
                        new
                        {
                            Id = 29,
                            Points = 3,
                            QuestionId = 6,
                            Title = "Fifa 18"
                        },
                        new
                        {
                            Id = 30,
                            Points = 4,
                            QuestionId = 6,
                            Title = "Gears Of War"
                        },
                        new
                        {
                            Id = 31,
                            Points = 5,
                            QuestionId = 6,
                            Title = "Civilization VI"
                        },
                        new
                        {
                            Id = 32,
                            Points = 5,
                            QuestionId = 6,
                            Title = "Candy Crush"
                        },
                        new
                        {
                            Id = 33,
                            Points = 1,
                            QuestionId = 7,
                            Title = "I'm not bothered, but I would rather there not be too graphic images and language. "
                        },
                        new
                        {
                            Id = 34,
                            Points = 2,
                            QuestionId = 7,
                            Title = "Why is mature content a problem when I only play sports games?"
                        },
                        new
                        {
                            Id = 35,
                            Points = 3,
                            QuestionId = 7,
                            Title = "Nope, not at all! I want blood, gore, and plenty of bad language."
                        },
                        new
                        {
                            Id = 36,
                            Points = 4,
                            QuestionId = 7,
                            Title = "Yes, definitely. I do not approve of those elements."
                        },
                        new
                        {
                            Id = 37,
                            Points = 5,
                            QuestionId = 7,
                            Title = "No, not a problem. I feel there is a time and place for everything."
                        },
                        new
                        {
                            Id = 38,
                            Points = 5,
                            QuestionId = 7,
                            Title = "I'm not bothered either way."
                        },
                        new
                        {
                            Id = 39,
                            Points = 1,
                            QuestionId = 8,
                            Title = "It's all I do!"
                        },
                        new
                        {
                            Id = 40,
                            Points = 2,
                            QuestionId = 8,
                            Title = "I do enjoy my games"
                        },
                        new
                        {
                            Id = 41,
                            Points = 3,
                            QuestionId = 8,
                            Title = "Very casual, I hardly ever play."
                        },
                        new
                        {
                            Id = 42,
                            Points = 4,
                            QuestionId = 8,
                            Title = "I'm a pretty hardcore gamer."
                        },
                        new
                        {
                            Id = 43,
                            Points = 5,
                            QuestionId = 8,
                            Title = "I guess I'm a casual gamer. I usually only play sports games. "
                        },
                        new
                        {
                            Id = 44,
                            Points = 5,
                            QuestionId = 8,
                            Title = "I love video games and play them whenever I have the time. "
                        },
                        new
                        {
                            Id = 45,
                            Points = 1,
                            QuestionId = 9,
                            Title = "I have plenty of consoles. "
                        },
                        new
                        {
                            Id = 46,
                            Points = 2,
                            QuestionId = 9,
                            Title = "Just one that I play on a regular basis. "
                        },
                        new
                        {
                            Id = 47,
                            Points = 3,
                            QuestionId = 9,
                            Title = "I have one or two consoles."
                        },
                        new
                        {
                            Id = 48,
                            Points = 4,
                            QuestionId = 9,
                            Title = "Consoles? No, I play games on my phone."
                        },
                        new
                        {
                            Id = 49,
                            Points = 5,
                            QuestionId = 9,
                            Title = "I have most consoles that have ever been released!"
                        },
                        new
                        {
                            Id = 50,
                            Points = 6,
                            QuestionId = 9,
                            Title = "Only Pc"
                        },
                        new
                        {
                            Id = 51,
                            Points = 1,
                            QuestionId = 10,
                            Title = "13th Warrior"
                        },
                        new
                        {
                            Id = 52,
                            Points = 2,
                            QuestionId = 10,
                            Title = "Any Given Sunday"
                        },
                        new
                        {
                            Id = 53,
                            Points = 3,
                            QuestionId = 10,
                            Title = "Die Hard"
                        },
                        new
                        {
                            Id = 54,
                            Points = 4,
                            QuestionId = 10,
                            Title = "The Da Vinci Code"
                        },
                        new
                        {
                            Id = 55,
                            Points = 5,
                            QuestionId = 10,
                            Title = "The Butterfly Effect"
                        },
                        new
                        {
                            Id = 56,
                            Points = 6,
                            QuestionId = 10,
                            Title = "Lord Of The Rings"
                        });
                });

            modelBuilder.Entity("News_Reviews.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("News_Reviews.DataModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("News_Reviews.DataModels.DataModels.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Platform"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Survival"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Battle Royale"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Visual novels"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Simulator"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Racing"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("News_Reviews.DataModels.DataModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("News_Reviews.DataModels.DataModels.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Playstation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xbox"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Nintendo"
                        });
                });

            modelBuilder.Entity("News_Reviews.DataModels.DataModels.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EA"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sony"
                        },
                        new
                        {
                            Id = 4,
                            Name = "From software"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CDPR"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Techland"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Blizzard"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Rockstar"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Capcom"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Square Enix"
                        });
                });

            modelBuilder.Entity("News_Reviews.DataModels.DataModels.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("News_Reviews.DataModels.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("News_Reviews.DataModels.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "How much lifespan are you hoping to get out of a game? "
                        },
                        new
                        {
                            Id = 2,
                            Title = "What do you prefer: Action or Logic? "
                        },
                        new
                        {
                            Id = 3,
                            Title = "Which of these is most important to you in a game? "
                        },
                        new
                        {
                            Id = 4,
                            Title = "Do you get easily bored with games? "
                        },
                        new
                        {
                            Id = 5,
                            Title = "Are the music and sound options important? "
                        },
                        new
                        {
                            Id = 6,
                            Title = "Which one of these games would you like to play? "
                        },
                        new
                        {
                            Id = 7,
                            Title = "Next, depending on age and taste, is mature content a problem? "
                        },
                        new
                        {
                            Id = 8,
                            Title = "How much of a gamer do you think you are? "
                        },
                        new
                        {
                            Id = 9,
                            Title = "How many consoles do you have? "
                        },
                        new
                        {
                            Id = 10,
                            Title = "Which of these films would you rather watch? "
                        });
                });

            modelBuilder.Entity("News_Reviews.DataModels.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("News_Reviews.DataModels.UserAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnswerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("News_Reviews.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("News_Reviews.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News_Reviews.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("News_Reviews.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("News_Reviews.DataModels.Answer", b =>
                {
                    b.HasOne("News_Reviews.DataModels.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("News_Reviews.DataModels.Comment", b =>
                {
                    b.HasOne("News_Reviews.DataModels.DataModels.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News_Reviews.DataModels.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("News_Reviews.DataModels.DataModels.News", b =>
                {
                    b.HasOne("News_Reviews.DataModels.DataModels.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("News_Reviews.DataModels.DataModels.Review", b =>
                {
                    b.HasOne("News_Reviews.DataModels.DataModels.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News_Reviews.DataModels.DataModels.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News_Reviews.DataModels.DataModels.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Platform");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("News_Reviews.DataModels.Post", b =>
                {
                    b.HasOne("News_Reviews.DataModels.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News_Reviews.DataModels.Theme", "Theme")
                        .WithMany("Posts")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("News_Reviews.DataModels.UserAnswers", b =>
                {
                    b.HasOne("News_Reviews.DataModels.Answer", "Answer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News_Reviews.DataModels.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News_Reviews.DataModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("News_Reviews.DataModels.Answer", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("News_Reviews.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("News_Reviews.DataModels.DataModels.Review", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("News_Reviews.DataModels.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("News_Reviews.DataModels.Theme", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
